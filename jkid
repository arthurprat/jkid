#! /usr/bin/env python
import sys, json, os

def print_help_and_quit(after_error=True):
    uz = "Usage :\tjkid [options] [key1 [key2 [...]]] filename"
    uz += "\nA key can be an object key or an array index."
    uz += "\nOptions :"
    uz += "\n\t-p / --preview"
    uz += "\n\t-q / --quiet"
    if after_error:
        print "---"
        print uz
        sys.exit(1)
    print "Help:"
    print "jkid is a small json reader.\n"
    print uz
    sys.exit(1)

def error(text=None):
    if text:
        print text
    print_help_and_quit()


if '-h' in sys.argv or '--help' in sys.argv:
    print_help_and_quit(False)

# args / options / input
opts = {'preview' : False, 'quiet' : False }
opt_args = {
    '-p' : 'preview',
    '--preview' : 'preview',
    '-q' : 'quiet',
    '--quiet' : 'quiet'
}
args = sys.argv[1:]
for oa in opt_args:
    if oa in args:
        opts[opt_args[oa]] = True
        args.remove(oa)

if not args or not os.path.isfile(args[-1]):
    if sys.stdin.isatty():
        error("No input found.")
    else:
        fil = sys.stdin
else:
    fil = open(args[-1], 'r')
    args.pop(-1)

# loading json
try:
    son = json.load(fil)
except Exception as e:
    error("Could not read json.\nError : " + str(e))

KEYS = args

for k in KEYS:
    if isinstance(son, list):
        try:
            k = int(k)
        except:
            error('Error : Key for arrays must be integers (' + k + ')')            
        if k < 0:
            error('Error : Key for arrays must be positive integers (' + k + ')')
        if k >= len(son):
            error('Error : Requested array index greater than array length (' + k + ')')
    elif isinstance(son, dict):
        if k not in son:
            error("Error : key '" + k + "' not found in json.")
    else:
        error("Error : object must be a json object or array to be called with key " + k + ".")
    son = son[k]
    
if not opts['quiet']:
    print ' > '.join(KEYS) + ' :'
if opts['preview']:
    OUT = {list : 'list'}
    if isinstance(son, dict):
        out = {}
        for (key, val) in son.items():
            out[key] = str(type(val))
        print json.dumps(out, sort_keys=True, indent=2)
    else:
        print type(son)
else:
    print json.dumps(son, sort_keys=True, indent=2)